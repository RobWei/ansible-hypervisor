---


- include_vars: passwords.yml

# Manage virtual Machines
- name: Gathering libvirt VM informations
  virt: command=info
  check_mode: no
  register: vm_info

- name: Get list of defined vms
  virt: command=list_vms
  check_mode: no
  register: vm_vms

- name: Gathering libvirt storage informations
  virt_pool: command=info
  register: storage_pools
  check_mode: no

- name: Create preseed directory
  file: path="/opt/installer/" state=directory mode=0755


- name: Create preseed vm directory
  file: path="/opt/installer/{{item.name}}/" state=directory mode=0755
  when: "'{{item.name | replace(\"-\",\"_\")}}' not in vm_info"
  with_items: "{{virtual_machines}}"

- name: Create preseed files
  template: src=preseed.cfg.j2 dest="/opt/installer/{{item.name}}/preseed.cfg"
  when: "'{{item.name | replace(\"-\",\"_\")}}' not in vm_info"
  with_items: "{{virtual_machines}}"

- name: Get vm_configs from hostvars
  set_fact:
    _managed_hosts_vm_config: '{{ _managed_hosts_vm_config | default({}) | combine( {item.name: {"name": item.name, "config": hostvars[item.name].vm_config}})}}'
  with_items:
    - "{{virtual_machines}}"

# An addtional step is required because VMs can have multiple NICs
- name: Prepare VM network settings
  set_fact:
    _virsh_install_network: '{{ _virsh_install_network | default({}) | combine( {item.0.name: {item.1.name: "--network=bridge:" + ( item.1.setup_name if item.1.setup_name is defined else item.1.name )+ ",model=virtio"}}, recursive=True) }}'
  with_subelements:
    - "{{_managed_hosts_vm_config}}"
    - config.network

- name: Prepare VM configuration
  set_fact:
    virsh_install_disk: '{{ virsh_install_disk | default({}) | combine( {item.key: "--disk path=" + storage_pools.pools[item.value.config.storage_pool].path + "/" + item.key + "." + item.value.config.disk.format | string + ",bus=" + item.value.config.disk.bus | string + ",size=" + item.value.config.disk.size | string + ",sparse=" + item.value.config.disk.sparse | string | lower + ",format=" + item.value.config.disk.format | string + ",cache=" + item.value.config.disk.cache | string | lower }) }}'
    virsh_install_cpu: '{{ virsh_install_cpu | default({}) | combine( {item.key: "--vcpus=" + item.value.config.cpus | string}) }}'
    virsh_install_network: '{{ virsh_install_network | default({}) | combine( {item.key: _virsh_install_network[item.key].values() | list | join(" ") } ) }}'
  with_dict: "{{_managed_hosts_vm_config}}"

# note: creates and when as double check to prevent accidential recreation of still created vms
- name: Create VM with virt-inst
  shell: >
    virt-install --connect qemu:///system -n {{item.key | replace('-','_')}} -r {{item.value.config.ram}} {{virsh_install_cpu[item.key]}} {{virsh_install_disk[item.key]}}
    --noautoconsole --os-type=linux --accelerate {{virsh_install_network[item.key]}} -k de --os-variant=generic --virt-type kvm
    --location={{virt_installer[item.value.config.installer.name].net_installer}} --initrd-inject=/opt/installer/{{item.key}}/preseed.cfg
    --extra-args="auto=true priority=critical
    {% if virt_installer[item.value.config.installer.name].distribution == 'ubuntu' and virt_installer[item.value.config.installer.name].release == 'xenial' %} net.ifnames=0 biosdevname=0{% endif %}
    console=ttyS0"
  args:
      creates: "{{storage_pools.pools[item.value.config.storage_pool].path}}/{{item.key}}.{{item.value.config.disk.format}}"
  when: "'{{item.key | replace(\"-\",\"_\")}}' not in vm_info"
  with_dict: "{{_managed_hosts_vm_config}}"

- name: Start vms which are set to be started and not running
  virt: state=running name={{item.name | replace(\"-\",\"_\")}}
  when: hostvars[item.name].vm_config.started == True
  with_items: "{{virtual_machines}}"

- name: Stop vms which are not set to be started and running
  virt: state=shutdown name={{item.name | replace(\"-\",\"_\")}}
  when: hostvars[item.name].vm_config.started != True
  with_items: "{{virtual_machines}}"


  #- name: Enable autostart for vms if enabled in configuration
  #  virt: command=autostart name={{item.name | replace(\"-\",\"_\")}}
  #  when: hostvars[item.name].vm_config.autostart == True
  #  with_items: "{{virtual_machines}}"

  #- name: Disable autostart for vms if disabled in configuration
  #virt: command=autostart name={{item.name | replace(\"-\",\"_\")}}
  #when: hostvars[item.name].vm_config.autostart != True
  #with_items: "{{virtual_machines}}"

- debug:
    var: hoster
